{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "homework-practice-11-knn-ZolotarevAnton",
      "provenance": [],
      "collapsed_sections": [],
      "toc_visible": true
    },
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.7.6"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "2KoC0-WJIJoY"
      },
      "source": [
        "# Машинное обучение, ФКН ВШЭ\n",
        "\n",
        "# Практическое задание 11. Поиск ближайших соседей\n",
        "\n",
        "## Общая информация\n",
        "\n",
        "Дата выдачи: 05.04.2021\n",
        "\n",
        "Мягкий дедлайн: 14.04.2021 00:59 MSK\n",
        "\n",
        "Жёсткий дедлайн: 18.04.2021 00:59 MSK\n",
        "\n",
        "## Оценивание и штрафы\n",
        "\n",
        "Каждая из задач имеет определенную «стоимость» (указана в скобках около задачи). Максимально допустимая оценка за работу — 6.51 балла.\n",
        "\n",
        "\n",
        "\n",
        "Сдавать задание после указанного жёсткого срока сдачи нельзя. При выставлении неполного балла за задание в связи с наличием ошибок на усмотрение проверяющего предусмотрена возможность исправить работу на указанных в ответном письме условиях.\n",
        "\n",
        "Задание выполняется самостоятельно. «Похожие» решения считаются плагиатом и все задействованные студенты (в том числе те, у кого списали) не могут получить за него больше 0 баллов (подробнее о плагиате см. на странице курса). Если вы нашли решение какого-то из заданий (или его часть) в открытом источнике, необходимо указать ссылку на этот источник в отдельном блоке в конце вашей работы (скорее всего вы будете не единственным, кто это нашел, поэтому чтобы исключить подозрение в плагиате, необходима ссылка на источник).\n",
        "\n",
        "Неэффективная реализация кода может негативно отразиться на оценке.\n",
        "\n",
        "## Формат сдачи\n",
        "\n",
        "Задания сдаются через систему anytask. Посылка должна содержать:\n",
        "\n",
        "* Ноутбук homework-practice-11-knn-Username.ipynb\n",
        "\n",
        "Username — ваша фамилия и имя на латинице именно в таком порядке."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "n-2MpmJQIK1A"
      },
      "source": [
        "\n",
        "import matplotlib.pyplot as plt\n",
        "import numpy as np\n",
        "import os\n",
        "import random\n",
        "\n",
        "from tqdm.notebook import tqdm"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "zne8FB5jxCpj"
      },
      "source": [
        "Возьмем [датасет](https://www.kaggle.com/delayedkarma/impressionist-classifier-data)  с картинами известных импрессионистов. Работать будем не с самими картинками, а с эмбеддингами картинок, полученных с помощью сверточного классификатора.\n",
        "\n",
        "![](https://storage.googleapis.com/kagglesdsdata/datasets/568245/1031162/training/training/Gauguin/190448.jpg?X-Goog-Algorithm=GOOG4-RSA-SHA256&X-Goog-Credential=databundle-worker-v2%40kaggle-161607.iam.gserviceaccount.com%2F20210405%2Fauto%2Fstorage%2Fgoog4_request&X-Goog-Date=20210405T125358Z&X-Goog-Expires=172799&X-Goog-SignedHeaders=host&X-Goog-Signature=a271b474bf9ec20ba159b951e0ae680fc2b0c694666031f7ea6fc39598172cc55e10f75c12b678b21da9e6bdc20e46886133c219625648b407d2f600eebfdda909b29e0f7f13276d8fea2f8d0480d6298bd98e7f118eb78e8b632fc3d141365356b0e3a2fdd4f09119f99f0907a31da62e8dae7e625e32d831238ecc227b1f5ad2e96a8bfb43d93ef6fe88d7e663e51d387d3550dcad2a7eefc5c941028ba0d7751d18690cf2e26fcdfaa4dacd3dcbb3a4cbb355e62c08b158007b5e764e468cecd3292dae4cfc408e848ecf3e0e5dbe5faa76fcdd77d5370c868583c06e4e3d40c73a7435bd8c32a9803fe6b536e1c6f0791219aadd06120291e937e57c214a)"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "tHSHdsD5I5yb"
      },
      "source": [
        "from sklearn.metrics import accuracy_score\n",
        "from sklearn.model_selection import GridSearchCV\n",
        "from sklearn.neighbors import KNeighborsClassifier"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ZucJvTWFKB5l"
      },
      "source": [
        "X_train = np.load('embeddings/embeds_avpool_train.npy')\n",
        "y_train = np.load('embeddings/labels_avpool_train.npy')\n",
        "X_test = np.load('embeddings/embeds_avpool_test.npy')\n",
        "y_test = np.load('embeddings/labels_avpool_test.npy')"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "hL0r-ew1xCpk"
      },
      "source": [
        "Будем смотреть на обычную долю верных ответов и на долю верных ответов в топ-3."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "suK0rywXY_gp"
      },
      "source": [
        "def top_3_accuracy_score(y_true, probas):\n",
        "    preds = np.argsort(probas, axis=1)[:, -3:]\n",
        "    matches = np.zeros_like(y_true)\n",
        "    for i in range(3):\n",
        "        matches += (preds[:, i] == y_true)\n",
        "    return matches.sum() / matches.size\n",
        "\n",
        "def scorer(estimator, X, y):\n",
        "    return accuracy_score(y, estimator.predict(X))"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "czpo3LsVxCpl"
      },
      "source": [
        "**Задание 1. (1 балл)**\n",
        "\n",
        "Обучите классификатор k ближайших соседей (из sklearn) на данных, подобрав лучшие гиперпараметры. Замерьте качество на обучающей и тестовой выборках."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "N6aPtXvT6AFo"
      },
      "source": [
        "Для начала стоит отметить, что перед нами задача 10-классовой классификации, нам нужно определить, эмбеддинг какой картины к какому из импрессионистов относится."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "UOb-jgKDxCpl",
        "outputId": "19c477c8-d1e6-4afe-b52f-a319687073fa"
      },
      "source": [
        "from sklearn.neighbors import KNeighborsClassifier\n",
        "sklearn_knn = KNeighborsClassifier()\n",
        "sklearn_knn.fit(X_train, y_train)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',\n",
              "                     metric_params=None, n_jobs=None, n_neighbors=5, p=2,\n",
              "                     weights='uniform')"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 5
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "XVD5FFlx5bXD",
        "outputId": "c21e2a61-febb-4346-dbdc-8e3a7995dd82"
      },
      "source": [
        "top_3_accuracy_score(y_test, sklearn_knn.predict_proba(X_test))"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.7616161616161616"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 6
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "r_SXphY25HYU",
        "outputId": "beb45022-5c3e-43ee-9848-d27493657a50"
      },
      "source": [
        "scorer(sklearn_knn, X_test, y_test)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.5131313131313131"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 7
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "IomRgEH45n_P"
      },
      "source": [
        "sklearn с дефолтными гиперпараметрами справился не особо хорошо (если сравнивать со значением точности, которую просят добыть в бонусе). Надеемся, что можно получше. Подберём гиперпараметры."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "blCnQcDs6MUy"
      },
      "source": [
        "from sklearn.model_selection import GridSearchCV\n",
        "paramters = {\n",
        "    'n_neighbors': range(2, 20),\n",
        "}\n",
        "sklearn_knn_gs = GridSearchCV(sklearn_knn, paramters)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "yNOzzkPEBntU",
        "outputId": "fb6fc640-fe4c-4696-e771-80abb6b4bce4"
      },
      "source": [
        "sklearn_knn_gs.fit(X_train, y_train)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "GridSearchCV(cv=None, error_score=nan,\n",
              "             estimator=KNeighborsClassifier(algorithm='auto', leaf_size=30,\n",
              "                                            metric='minkowski',\n",
              "                                            metric_params=None, n_jobs=None,\n",
              "                                            n_neighbors=5, p=2,\n",
              "                                            weights='uniform'),\n",
              "             iid='deprecated', n_jobs=None,\n",
              "             param_grid={'n_neighbors': range(2, 20)}, pre_dispatch='2*n_jobs',\n",
              "             refit=True, return_train_score=False, scoring=None, verbose=0)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 22
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "XOpZlBEVFscw",
        "outputId": "ead07e14-5243-4cee-ec95-660f2b234998"
      },
      "source": [
        "sklearn_knn_gs.best_params_"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "{'n_neighbors': 13}"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 23
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "I1U37QfyEYV1",
        "outputId": "425f181e-9cff-4a9d-eb7c-e0bac724ddf9"
      },
      "source": [
        "top_3_accuracy_score(y_test, sklearn_knn_gs.predict_proba(X_test))"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.8080808080808081"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 24
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "0oG-V0BpEajq",
        "outputId": "7565fad1-5356-4b59-a38f-594d1ffe1baf"
      },
      "source": [
        "scorer(sklearn_knn_gs, X_test, y_test)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.5303030303030303"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 25
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Zs05-nZDIOq3"
      },
      "source": [
        "Видим, что традиционный кнн с подобранными гиперпараметрами (одним гиперпараметром) не дал сильного улучшения в точности результата. Попробуем подобрать степень для метрики Минковского, которая используется для измерения расстояния между объектами"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "0aAe-DqeIZEF"
      },
      "source": [
        "paramters = {\n",
        "    'n_neighbors': [11, 12, 13, 14, 15],\n",
        "    'p': [1, 2, 3, 5, 10]\n",
        "}\n",
        "sklearn_knn_gs = GridSearchCV(sklearn_knn, paramters)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ESqUtBNVIkFX",
        "outputId": "2d4d53c0-cd79-4ff0-e63f-4c24bab21ee9"
      },
      "source": [
        "sklearn_knn_gs.fit(X_train, y_train)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "GridSearchCV(cv=None, error_score=nan,\n",
              "             estimator=KNeighborsClassifier(algorithm='auto', leaf_size=30,\n",
              "                                            metric='minkowski',\n",
              "                                            metric_params=None, n_jobs=None,\n",
              "                                            n_neighbors=5, p=2,\n",
              "                                            weights='uniform'),\n",
              "             iid='deprecated', n_jobs=None,\n",
              "             param_grid={'n_neighbors': [11, 12, 13, 14, 15],\n",
              "                         'p': [1, 2, 3, 5, 10]},\n",
              "             pre_dispatch='2*n_jobs', refit=True, return_train_score=False,\n",
              "             scoring=None, verbose=0)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 11
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Q2XiXkRfImRr",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "9855a19a-6cfb-4ac2-eb0f-b7a1717df892"
      },
      "source": [
        "sklearn_knn_gs.best_params_"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "{'n_neighbors': 13, 'p': 1}"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 12
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "n2ZhtW_bIncF",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "56f35817-c523-4ef5-d8f2-835490bc02dd"
      },
      "source": [
        "top_3_accuracy_score(y_test, sklearn_knn_gs.predict_proba(X_test))"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.8151515151515152"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 13
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "0YOVuGcaIpXy",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "d2f7eaa1-3f5f-4ac9-fd46-c4d7914b4598"
      },
      "source": [
        "scorer(sklearn_knn_gs, X_test, y_test)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.5484848484848485"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 14
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ILoe0r-5H_U0"
      },
      "source": [
        "Видим, что на тестовой выборке чуть более высокий результат выдаёт манхэттеновская метрика, но опять же качество достаточно далеко от таргета в 0.75..."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "18t_iv8RHvGM",
        "outputId": "516a2765-8943-4a19-88ca-beb34873201a"
      },
      "source": [
        "top_3_accuracy_score(y_train, sklearn_knn_gs.predict_proba(X_train))"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.9132397191574724"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 15
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "oY-dBsSBHy3A",
        "outputId": "d563d4f6-febe-45f9-9451-9933feb8f12e"
      },
      "source": [
        "scorer(sklearn_knn_gs, X_train, y_train)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.6464393179538616"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 16
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "3fOM4oH0IKSS"
      },
      "source": [
        "Видим, что на обучающей выборке качество отличается на порядок. То есть мы можем предположить, что либо наша модель находит на трейне зависимости, которых на самом деле нет в тестовой выборке, либо она не выявляет какие-то закономерности, свойственные истинной генеральной совокупности эмбеддингов картин импрессионистов."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "_TBKfMgLxCpl"
      },
      "source": [
        "**Задание 2. (2 балла)** \n",
        "\n",
        "Теперь будем пользоваться метрикой Махалонобиса. Обучите её одним из методов [отсюда](http://contrib.scikit-learn.org/metric-learn/supervised.html). Напомним, что вычисление метрики Махалонобиса эквивалентно вычислению евклидова расстояния между объектами, к которым применено некоторое линейное преобразование (вспомните семинары). Преобразуйте данные и обучите kNN на них, перебрав гиперпараметры, замерьте качество.\n",
        "\n",
        "Заметим, что в библиотеке metric-learn есть несколько способов обучать матрицу преобразования. Выберите лучший, аргументируйте свой выбор."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "yU89YooExCpl"
      },
      "source": [
        "Note: Некоторые методы с дефолтными параметрами учатся очень долго, будьте внимательны\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ESiChlOPKP4J"
      },
      "source": [
        "Решил не мудрствовать лукаво и использовать LMNN, воспользовавшись хинтом от ассистента в чате ⊂(￣▽￣)⊃\n",
        "\n",
        "На самом деле LMNN - это аналог SVM в KNN, который пытается сделать такое преобразование размерности, при котором максимизируется отступ/расстояние от объектов другого класса и минимизируется расстояние до объектов своего класса. На мой взгляд этот алгоритм не особо крут, потому что мы можем переобучиться под выборку и нагородить такое пространство, которое будет слишком неадекватно однозначно разделять наши классы. Поэтому сначала оценим его со стандартными гиперпараметрами, не тратя время на их валидацию (вдруг на тесте получится совсем плохо)"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "9_uXUMeexCpl",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "b5b3c00a-2022-48b2-fb86-73330a7c9021"
      },
      "source": [
        "from metric_learn import LMNN\n",
        "lmnn = LMNN(learn_rate=1e-4, max_iter=100, convergence_tol=0.005)\n",
        "lmnn.fit(X_train, y_train)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "LMNN(convergence_tol=0.005, init='auto', k=3, learn_rate=0.0001, max_iter=100,\n",
              "     min_iter=50, n_components=None, preprocessor=None, random_state=None,\n",
              "     regularization=0.5, verbose=False)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 22
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "n9RsOEZWS7Kp",
        "outputId": "24b2bac2-39eb-4cea-cdfe-de4863bc8a9c"
      },
      "source": [
        "knn_lmnn = KNeighborsClassifier(metric=lmnn.get_metric())\n",
        "knn_lmnn.fit(X_train, y_train)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "KNeighborsClassifier(algorithm='auto', leaf_size=30,\n",
              "                     metric=<function MahalanobisMixin.get_metric.<locals>.metric_fun at 0x7f419b547560>,\n",
              "                     metric_params=None, n_jobs=None, n_neighbors=5, p=2,\n",
              "                     weights='uniform')"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 23
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "WIPyoEW0LL88",
        "outputId": "00a72a49-dae0-407b-b9dd-4efdcfe7b2b3"
      },
      "source": [
        "top_3_accuracy_score(y_test, knn_lmnn.predict_proba(X_test))"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.7747474747474747"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 24
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "T-b5XkcwLSb2",
        "outputId": "77112311-92f9-480b-94cc-75468f564dc8"
      },
      "source": [
        "scorer(knn_lmnn, X_test, y_test)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.5373737373737374"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 25
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "6DfIfDl6Y-PB"
      },
      "source": [
        "Видим, что алгоритм проработал чуть лучше knn со стандартными гиперпараметрами, но хуже базового knn с оптимальными."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "JssIykARQ9Qs"
      },
      "source": [
        "Сравним полученные результаты с NCA, который представляет собой по сути метод главных компонент в Махалонобисе, извлекая комбинации самыхе полезных признаков в наших эмбеддингах. Идейно этот метод мне нравится больше и я надеюсь, что он выдаст чуть лучший результат, хоть функция и будет ни выпуклой, ни вогнутой (есть риск не найти глобальный оптимум или искать его очень долго через перебор)\n",
        "\n",
        "Я решил сравнить результаты со стандартными гиперпараметрами, чтобы потом подобрать через кросс-валидацию их оптимальные значения только для наилучшего из получившихся (наивно предполагаю, что если стандартные параметры дали лучший результат, то и оптимальные будут лучше)"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "tnkTGYUyRX_u",
        "outputId": "9519431b-b4a9-423c-8f0d-545f570595d2"
      },
      "source": [
        "from metric_learn import NCA\n",
        "nca = NCA()\n",
        "nca.fit(X_train, y_train)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "NCA(init='auto', max_iter=100, n_components=None, preprocessor=None,\n",
              "    random_state=None, tol=None, verbose=False)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 37
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "MMLyxowLZr9u",
        "outputId": "94cfc5dc-2f58-4e8f-f267-4af059f8b0f2"
      },
      "source": [
        "knn_nca = KNeighborsClassifier(metric=nca.get_metric())\n",
        "knn_nca.fit(X_train, y_train)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "KNeighborsClassifier(algorithm='auto', leaf_size=30,\n",
              "                     metric=<function MahalanobisMixin.get_metric.<locals>.metric_fun at 0x7f419b4d77a0>,\n",
              "                     metric_params=None, n_jobs=None, n_neighbors=5, p=2,\n",
              "                     weights='uniform')"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 38
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "oybJDHGsR6Uv",
        "outputId": "604a00b3-5515-414c-b14a-c915cd499088"
      },
      "source": [
        "top_3_accuracy_score(y_test, knn_nca.predict_proba(X_test))"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.7666666666666667"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 29
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "HL28SOmyR6Uw",
        "outputId": "c2ff5b38-adc6-4a99-8802-7485b53b60ef"
      },
      "source": [
        "scorer(knn_nca, X_test, y_test)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.5595959595959596"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 30
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "xt-bgwgqSTDg"
      },
      "source": [
        "Видим, что лучшим c точки зрения точности здесь оказался алгоритм LCA, его и будем валидировать (+ он быстрее!). Я попробовал перебрать количество компонент для NCA, предположив, что некоторые признаки в эмбеддинге могут отражать несуществующие зависимости в трейне, но отсутствие возможности автоматически перебрать наборы компонент и увидив значительное ухудшение качества на малом их количестве, я отказался от этой идеи, поэтому здесь опять перебираем только количество соседей."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "vBNU8FzwSdnj"
      },
      "source": [
        "paramters = {\n",
        "    'n_neighbors': [3, 5, 7, 10, 11, 12, 13, 15]\n",
        "}\n",
        "mahalonobis_gs = GridSearchCV(KNeighborsClassifier(metric=nca.get_metric()), paramters)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "_TeMY1gaSdnu",
        "outputId": "e9112d14-fab2-4dbb-a2d1-caf9f7ee8e56"
      },
      "source": [
        "mahalonobis_gs.fit(X_train, y_train)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "GridSearchCV(cv=None, error_score=nan,\n",
              "             estimator=KNeighborsClassifier(algorithm='auto', leaf_size=30,\n",
              "                                            metric=<function MahalanobisMixin.get_metric.<locals>.metric_fun at 0x7f419b570b90>,\n",
              "                                            metric_params=None, n_jobs=None,\n",
              "                                            n_neighbors=5, p=2,\n",
              "                                            weights='uniform'),\n",
              "             iid='deprecated', n_jobs=None,\n",
              "             param_grid={'n_neighbors': [3, 5, 7, 10, 11, 12, 13, 15]},\n",
              "             pre_dispatch='2*n_jobs', refit=True, return_train_score=False,\n",
              "             scoring=None, verbose=0)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 40
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "SE2HVUCLSdnv",
        "outputId": "51b9a156-d4b6-4c1a-b9a8-06e722db10a2"
      },
      "source": [
        "mahalonobis_gs.best_params_"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "{'n_neighbors': 13}"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 41
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "yqj_yMi1Sdnv",
        "outputId": "4c5e9bde-8772-4bf4-bb94-cad812b0f4a1"
      },
      "source": [
        "top_3_accuracy_score(y_test, mahalonobis_gs.predict_proba(X_test))"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.8121212121212121"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 42
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "znGTY601Sdnw",
        "outputId": "26e39c17-3005-4b74-8b0c-32c0afc52699"
      },
      "source": [
        "scorer(mahalonobis_gs, X_test, y_test)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.5626262626262626"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 43
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "5fC_d9mzq9hb"
      },
      "source": [
        "По итогу NCA с подобранными гиперпараметрами дало нам точность предсказания 0.56, что выше любого другого полученного к концу этого задания на тестовой выборке результата. Ура?"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "B1i10KyMK9_s"
      },
      "source": [
        "**Задание 3. (1 балл)** \n",
        "\n",
        "Что будет, если в качестве матрицы в расстоянии Махалонобиса использовать случайную матрицу? Матрицу ковариаций?"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "B1xOB1qPoF5w"
      },
      "source": [
        "$D(x, x')=\\sqrt{(x-x')^T M (x-x')}=\\sqrt{(Lx-Lx')^T (Lx-Lx')}$\n",
        "\n",
        "$M=L^T L$\n",
        "\n",
        "То есть обычно в Махалонобисе мы делаем такое преобразование: $X^*=L^TX$\n",
        "\n",
        "Мы пробуем преобразовать M и поставить на её место случайную матрицу или матрицу ковариаций. \n",
        "\n",
        "Если берём матрицу ковариаций $\\Sigma = centered(X) centered(X^T)$, то получим необходимость следующего преобразования: $X^* = centered(X^T) X$\n",
        "\n",
        "Если же берём случайную матрицу, то получаем $X^* = P^T X$, где P - матрица случайных значений"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Omg0JM1wx7-v",
        "outputId": "35679323-7d8c-439e-fca7-16184be1305e"
      },
      "source": [
        "X_train.shape[0]"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "3988"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 45
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "PUeYZ_egLGJo"
      },
      "source": [
        "train_random = np.random.rand(X_train.shape[0], X_train.shape[0])\n",
        "X_train_random = train_random @ X_train\n",
        "test_random = np.random.rand(X_test.shape[0], X_test.shape[0])\n",
        "X_test_random = test_random @ X_test\n",
        "assert X_train_random.shape == X_train.shape"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "gRLaKrxLzerM",
        "outputId": "94e7d2f2-7d37-4052-fe69-c533a99d85d8"
      },
      "source": [
        "sklearn_knn = KNeighborsClassifier(n_neighbors=13)\n",
        "sklearn_knn.fit(X_train_random, y_train)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',\n",
              "                     metric_params=None, n_jobs=None, n_neighbors=13, p=2,\n",
              "                     weights='uniform')"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 55
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "BE_yDyOAzerV",
        "outputId": "407c7c56-2d6c-4403-ae18-2f7b535cd27f"
      },
      "source": [
        "top_3_accuracy_score(y_test, sklearn_knn.predict_proba(X_test_random))"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.3"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 56
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ZBxeMBuNzerW",
        "outputId": "c1ee1910-79c9-43d8-ce9a-bdc7d8632533"
      },
      "source": [
        "scorer(sklearn_knn, X_test_random, y_test)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.1"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 57
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ailQPY4IzkoZ"
      },
      "source": [
        "Видим, что если заменить матрицу в расстоянии Махаланобиса на случайную, то качество рушится до минимально возможного значения, если модель выдавала бы один и тот же класс для 10-классовой классификации со сбалансированными классами, что в целом ожидаемо, поскольку мы теряем всю возможную информацию из нашего признакового пространства после домножения на случайные значения.\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "PHxLN1VKyE5E"
      },
      "source": [
        "from scipy.spatial import distance\n",
        "X_train_cov = np.cov(X_train) @ X_train\n",
        "X_test_cov = np.cov(X_test) @ X_test\n",
        "assert X_train_random.shape == X_train.shape"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "OHDIu02y0elz",
        "outputId": "55e5761c-c339-481b-a318-1bd645de8b6c"
      },
      "source": [
        "sklearn_knn = KNeighborsClassifier(n_neighbors=13)\n",
        "sklearn_knn.fit(X_train_cov, y_train)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',\n",
              "                     metric_params=None, n_jobs=None, n_neighbors=13, p=2,\n",
              "                     weights='uniform')"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 61
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "KTogjwq-0el0",
        "outputId": "584c8695-ffef-49e5-cdc0-8d4823ff828c"
      },
      "source": [
        "top_3_accuracy_score(y_test, sklearn_knn.predict_proba(X_test_cov))"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.47878787878787876"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 62
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "eTrcMb4C0el0",
        "outputId": "60fe9966-dc47-4e0e-f398-690c5d0dca11"
      },
      "source": [
        "scorer(sklearn_knn, X_test_cov, y_test)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.19797979797979798"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 63
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "2KICOgwz0jDq"
      },
      "source": [
        "Видим, что при домножении на ковариационную матрицу у нас получается результат чуть лучший чем при домножении на матрицу случайных значений, но всё равно результат в разы хуже базового кнн, так что нет никакого смысла в кросс-валидации гипер-параметров."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "_QIFy8nkxCpm"
      },
      "source": [
        "**Задание 4. (1 балл)** Обучите какой-нибудь градиентный бустинг на обычных и трансформированных наборах данных, замерьте качество, задумайтесь о целесообразности других методов."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "42E3Jvx52DTU"
      },
      "source": [
        "* Обычный градиентный бустинг из sklearn"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "JvhOwOUZxCpm",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "74282f2f-7bd6-4556-c15e-e02b7d8596bf"
      },
      "source": [
        "from sklearn.ensemble import GradientBoostingClassifier\n",
        "clf = GradientBoostingClassifier(random_state=0)\n",
        "clf.fit(X_train, y_train)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,\n",
              "                           learning_rate=0.1, loss='deviance', max_depth=3,\n",
              "                           max_features=None, max_leaf_nodes=None,\n",
              "                           min_impurity_decrease=0.0, min_impurity_split=None,\n",
              "                           min_samples_leaf=1, min_samples_split=2,\n",
              "                           min_weight_fraction_leaf=0.0, n_estimators=100,\n",
              "                           n_iter_no_change=None, presort='deprecated',\n",
              "                           random_state=0, subsample=1.0, tol=0.0001,\n",
              "                           validation_fraction=0.1, verbose=0,\n",
              "                           warm_start=False)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 72
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "VOnwfrgs1vBx",
        "outputId": "a5b6e5c7-fcfb-4626-c662-4c1a8bd58438"
      },
      "source": [
        "top_3_accuracy_score(y_test, clf.predict_proba(X_test))"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.8565656565656565"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 73
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "5hGF7IAO1vBy",
        "outputId": "dbaf81ed-a3eb-4d09-8c78-24d0218589da"
      },
      "source": [
        "scorer(clf, X_test, y_test)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.5878787878787879"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 74
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "0LBR4q2y3A77"
      },
      "source": [
        "Обычный бустинг на базовых гиперпараметрах выдал результат лучший, чем любые использованные ранее модели knn. А стоило ли их изучать? ))\n",
        "\n",
        "Попробуем использовать xgboost, поскольку бустинг из склёрна на базовых параметрах обучался чересчур долго...\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "EyHDIpYR3BSY",
        "outputId": "b1eb4e3d-a09c-41cf-d095-1a0ead7806d3"
      },
      "source": [
        "import xgboost as xgb\n",
        "xg = xgb.XGBClassifier(n_jobs=1)\n",
        "xg.fit(X_train, y_train)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "XGBClassifier(base_score=0.5, booster='gbtree', colsample_bylevel=1,\n",
              "              colsample_bynode=1, colsample_bytree=1, gamma=0,\n",
              "              learning_rate=0.1, max_delta_step=0, max_depth=3,\n",
              "              min_child_weight=1, missing=None, n_estimators=100, n_jobs=1,\n",
              "              nthread=None, objective='multi:softprob', random_state=0,\n",
              "              reg_alpha=0, reg_lambda=1, scale_pos_weight=1, seed=None,\n",
              "              silent=None, subsample=1, verbosity=1)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 69
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "8vbHAyKK3Kr3",
        "outputId": "b00f9467-17fa-445f-ee97-05ced1136d5b"
      },
      "source": [
        "top_3_accuracy_score(y_test, xg.predict_proba(X_test))"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.8676767676767677"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 70
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "w85RfMPI3Nmt",
        "outputId": "2c6958b5-402a-4178-f85b-6798e05474fb"
      },
      "source": [
        "scorer(xg, X_test, y_test)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.592929292929293"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 71
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "WV9pSXk83xQI"
      },
      "source": [
        "Попробуем обучить на преобразованных данных:"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "6186L8ix3w8t"
      },
      "source": [
        "X_train_mahal = nca.transform(X_train)\n",
        "X_test_mahal = nca.transform(X_test)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "4cgigBhU4QLg",
        "outputId": "2e034758-e8ba-4005-dba9-ef6cc75974cb"
      },
      "source": [
        "xg.fit(X_train_mahal, y_train)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "XGBClassifier(base_score=0.5, booster='gbtree', colsample_bylevel=1,\n",
              "              colsample_bynode=1, colsample_bytree=1, gamma=0,\n",
              "              learning_rate=0.1, max_delta_step=0, max_depth=3,\n",
              "              min_child_weight=1, missing=None, n_estimators=100, n_jobs=1,\n",
              "              nthread=None, objective='multi:softprob', random_state=0,\n",
              "              reg_alpha=0, reg_lambda=1, scale_pos_weight=1, seed=None,\n",
              "              silent=None, subsample=1, verbosity=1)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 76
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "4H1OUOBr4Sdt",
        "outputId": "0c73a8a8-33ea-4a89-f339-efb7bbd4805e"
      },
      "source": [
        "top_3_accuracy_score(y_test, xg.predict_proba(X_test_mahal))"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.8535353535353535"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 77
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "9dEBzybJ4VRK",
        "outputId": "91c05837-b74d-4a1c-d61a-959fe8030aa2"
      },
      "source": [
        "scorer(xg, X_test_mahal, y_test)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.5959595959595959"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 78
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ZR8-KjIu5cU3"
      },
      "source": [
        "Видим, что на базовых гиперпараметрах xgboost чуть улучшил точность предсказания, но при этом несколько ухудшилась доля верных предсказаний в топ-3 по вероятности принадлежности к классу. Давайте валидировать xgboost на Махалонобисе, поскольку top-3-accuracy всё же не ключевая наша метрика."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "7I2CfNfX6QIg"
      },
      "source": [
        "paramters = {\n",
        "    'learning_rate': [0.3, 0.1, 0.075, 0.05],\n",
        "    'max_depth': [1, 3, 5, 7]\n",
        "    }\n",
        "xg_gs = GridSearchCV(xgb.XGBClassifier(), paramters, verbose=3)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "hFl_AvhA6QIs"
      },
      "source": [
        "xg_gs.fit(X_train_mahal, y_train)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "2C2I9ST66QIt",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "6cc75d14-3b2d-4aae-c591-545ffc3ed6de"
      },
      "source": [
        "xg_gs.best_params_"
      ],
      "execution_count": 103,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "{'learning_rate': 0.075, 'max_depth': 5}"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 103
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "uZb1E83OIVba"
      },
      "source": [
        "После полуторачасовой кросс-валидации мы смогли подобрать оптимальные гиперпараметры для xgboost, подобрав требуемую точность модели и максимальную глубину деревьев в композиции. Проверим качество:"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "8-prj7QR6QIu",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "25d955c9-399e-473e-ddf6-ade5cee610fd"
      },
      "source": [
        "top_3_accuracy_score(y_test, xg_gs.predict_proba(X_test_mahal))"
      ],
      "execution_count": 106,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.8575757575757575"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 106
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "SUDntkGW6QIu",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "05e0fe4d-d921-4279-adc2-e9dfc52c0ca9"
      },
      "source": [
        "scorer(xg_gs, X_test_mahal, y_test)"
      ],
      "execution_count": 107,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.6070707070707071"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 107
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "zXl4iuBlJJ89"
      },
      "source": [
        "Видим, что качество повысилось лишь незначительно, как будто бы градиентный бустинг на имеющихся представлениях картин упёрся в свой производственный максимум..."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "6YoH_3wL2Lmz"
      },
      "source": [
        "Для интереса сравним с Random Forest"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "vKVvx2xL2aIk",
        "outputId": "86c98993-4c26-4e4e-d222-9f3c2607a8bd"
      },
      "source": [
        "from sklearn.ensemble import RandomForestClassifier\n",
        "RF = RandomForestClassifier(max_depth=2, random_state=0)\n",
        "RF.fit(X_train, y_train)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,\n",
              "                       criterion='gini', max_depth=2, max_features='auto',\n",
              "                       max_leaf_nodes=None, max_samples=None,\n",
              "                       min_impurity_decrease=0.0, min_impurity_split=None,\n",
              "                       min_samples_leaf=1, min_samples_split=2,\n",
              "                       min_weight_fraction_leaf=0.0, n_estimators=100,\n",
              "                       n_jobs=None, oob_score=False, random_state=0, verbose=0,\n",
              "                       warm_start=False)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 66
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "TCNuUS342p-p",
        "outputId": "6334e047-ee70-4ff5-fd5e-ce13fe8dca4e"
      },
      "source": [
        "top_3_accuracy_score(y_test, RF.predict_proba(X_test))"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.7666666666666667"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 67
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Hf2sHvfQ2rf5",
        "outputId": "97882835-f7d1-4550-bd9a-130eebf42e93"
      },
      "source": [
        "scorer(RF, X_test, y_test)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.44242424242424244"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 68
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "R2BNdJB95_0x"
      },
      "source": [
        "Видим, что эмбеддинги с трудом поддаются случайному лесу, на базовых гиперпараметрах качество оказалось на порядок хуже и knn, и бустинга."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ZpbnT-qSxCpm"
      },
      "source": [
        "**Бонус. (1 балл)**\n",
        "\n",
        "Достигните доли верных ответов 0.75 на тестовой выборке, не используя нейросети."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "0MblZLZN8SlK"
      },
      "source": [
        "Почему-то мне кажется, что при составлении домашнего задания такое качество достичь не получилось, поскольку вне зависимости от значений гиперпараметров на knn, xgboost, randomforest не получилось приблизиться даже к качеству 0.65. Даже не знаю, как здесь можно без нейросетей пробить бонус..."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "MKdLxWNy9o4L"
      },
      "source": [
        "Ну можно попробовать натюнить ядерный SVM, вдохновившись первой домашкой по курсу..."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "btaXUkDHxQjk",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "dc487a4e-02c2-456d-fc7e-1e16859bc22e"
      },
      "source": [
        "import time\n",
        "from sklearn.svm import SVC\n",
        "\n",
        "start = time.time()\n",
        "svm = SVC(kernel='linear')\n",
        "svm.fit(X_train, y_train)\n",
        "print(scorer(svm, X_test, y_test))\n",
        "finish = time.time()\n",
        "print(f'Время выполнения: {finish - start:.0f} с')"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "0.6101010101010101\n",
            "Время выполнения: 4 с\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "PIilftfWAkFQ",
        "outputId": "f4c241d1-792b-468e-8f97-f4f6872e4712"
      },
      "source": [
        "start = time.time()\n",
        "svm = SVC(kernel='rbf')\n",
        "svm.fit(X_train, y_train)\n",
        "print(scorer(svm, X_test, y_test))\n",
        "finish = time.time()\n",
        "print(f'Время выполнения: {finish - start:.0f} с')"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "0.6050505050505051\n",
            "Время выполнения: 6 с\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "9GVV6-YQvM1V"
      },
      "source": [
        "Видим, что модель SVM с линейным ядром выдала лучший результат, чем xgboost и PCA на метрике Махаланобиса. Но 0.61 это всё ещё результат, очень далёкий от таргета в 0.75 и даже от того, что получилось у Миши (0.65+)"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "qAmcBiJsKK33",
        "outputId": "67bc7eb5-8ea9-4ae3-a322-2f88b64523b3"
      },
      "source": [
        "from sklearn.metrics import confusion_matrix\n",
        "confusion = confusion_matrix(svm.predict(X_test), y_test)\n",
        "confusion"
      ],
      "execution_count": 109,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[58, 11,  7,  1,  7,  2,  6,  5,  5,  1],\n",
              "       [ 9, 46,  6,  4,  2,  0,  2, 12,  6,  9],\n",
              "       [ 8,  5, 63,  2,  3,  4,  8,  4,  0,  1],\n",
              "       [ 1,  2,  1, 64,  4, 16,  4,  4,  6, 11],\n",
              "       [ 6,  4,  7,  1, 65,  2,  0,  3,  5,  2],\n",
              "       [ 5,  1,  1, 12,  6, 54,  9,  7,  5,  2],\n",
              "       [ 4,  2, 10,  4,  1, 11, 64,  4,  1,  6],\n",
              "       [ 1,  8,  2,  0,  2,  3,  1, 54,  0,  0],\n",
              "       [ 6, 18,  1,  6,  3,  4,  2,  6, 68,  4],\n",
              "       [ 1,  2,  1,  5,  6,  3,  3,  0,  3, 63]])"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 109
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "vH1SDgmNMGS-"
      },
      "source": [
        "Легко заметить, что для некоторых пар авторов количество неверно предсказанной принадлежности картины гораздо больше, чем в среднем. Может быть, есть смысл обучить какие-нибудь классификаторы на этих парах авторах, чтобы лучше отличать их друг от друга. Но я этого делать конечно не буду..."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "jpBwWM7yxRPb"
      },
      "source": [
        "**Бонус. (0.5 балла)**\n",
        "\n",
        "Если вам понравилось это задание и вы хотите приобщиться к искусству, настоятельно рекомендуем отвлечься от учебы, найти себе компанию и сходить в [Пушкинский музей](https://pushkinmuseum.art/visitors/index.php?lang=ru), в которым традиционно выставляются картины известных импрессионистов 20-го века. В данный момент там проходит временная экспозиция \"[Не живопись.](https://pushkinmuseum.art/events/archive/2021/exhibitions/gallery/index.php)\", где выставлены работы импрессионистов на керамике и текстиле.\n",
        "\n",
        "Если компания не находится, а одному идти совсем не хочется, можно обратиться за помощью к ассистентам или преподавателям, это станет отличным поводом наладить контакт с ними.\n",
        "\n",
        "В качестве ответа на задание необходимо прислать фотоотчет, на котором видно, что вы посетили это замечательное место после выдачи ДЗ."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "2OcaSV6y-IpV"
      },
      "source": [
        "Поскольку \"Не живопись\" открывается только 20 апреля, пришлось искать другое место, куда можно сходить, где я при этом доселе не бывал. Я нашёл в интернете такую любопытную вещь, как выставка работ Дали, Пикассо и культуры индейских государств. Да, это чуть-чуть далеквато от импрессионизма (Пикассо погряз в кубизме после последних импрессионистов типа Моне и экспрессионистов типа Мунка, а Дали вообще пошёл в разнос с абстракционизмом, про индейцев молчу), но я решил, что для получения бонусного балла будет достаточно и проникнуться таким искусством. \n",
        "\n",
        "Зайдя на экспозицию с достаточно низкими ожиданиями, я в какой-то степени проникся некоторыми работами Дали, почувствовав всю ту низменную боль, испытываемую героями, проведя параллели со своими страданиями на мо2 (которые я сам осознанно выбрал вместо более лёгких курсов своего факультета). Мне понравились созданные им скульптуры, обладающие не всегда очевидной смысловой нагрузкой (в одном зале были тупо зарисовки обнажённых дам, которые были написаны им уже в дедовском возрасте).\n",
        "\n",
        "Ну в общем вот:"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "kY_nClfl-Bdl"
      },
      "source": [
        "[Ссылка на папку в Яндекс.Диске с фотографиями из музея](https://disk.yandex.ru/d/7xxbo93hXgJiqQ?w=1) (кстати, если просматривать с телефона, то могут не отображаться названия файлов, к которым тоже приложены определённые усилия. Уважаемый ассистент, зайдите, пожалуйста, в информацию о файле, надеюсь хоть одно название сможет поднять Вам настроение)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "zvQ_cRHH_f8F"
      },
      "source": [
        "Кстати, оказалось, что эта выставка в Москве достаточно давно, но я узнал о ней только этой зимой и этот бонус стал поводом посетить эту экспозицию. Оказалось, там рядом в саду Бауманна есть выставки с репродукциями картин Моне и Мунка, которые я тоже хочу посетить уже после заверешния работы над этой домашней работой. Если для полного балла за бонус предоставленного фотоотчёта не хватит, то схожу туда и дополню его своими кривляниями на фоне работ Мунка и Моне. Спасибо за уделённое время на анализ моего творчества!"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "4-F6cb3nELIm"
      },
      "source": [
        "**Бонус. (0.01 балла)**\n",
        "\n",
        "Предложите самый лучший каомодзи и объясните свой выбор"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "51iXZZVIGWmG"
      },
      "source": [
        "Я не особо знаком с культурой каомодзи (в целом узнал как эти штуки называются только благодаря этой домашке), но порыскав на сайте с примерами этих текстовых смайликов, мне особо понравился вот этот:\n",
        "\n",
        "Σ(°△°||)︴\n",
        "\n",
        "Он символизирует страх человека при виде оператора суммы (за баллы по практическим домашкам) и достаточно хорошо описывает моё состояние надвигающегося непреодолимого коллапса с итоговой оценкой за этот курс. "
      ]
    }
  ]
}
